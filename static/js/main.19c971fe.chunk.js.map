{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","code","renderCode","loadLoginComponent","bind","assertThisInitialized","loadAgendaComponent","onChange","editor","monaco","console","log","focus","newValue","e","edits","slice","indexOf","setState","react_default","a","createElement","className","dangerouslySetInnerHTML","__html","Button","variant","color","onClick","lib_default","width","height","language","theme","value","options","selectOnLineNumbers","bracketMatching","editorDidMount","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TA2HeA,cArHb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAI,2TAYJC,WAAY,kBAEdT,EAAKU,mBAAqBV,EAAKU,mBAAmBC,KAAxBV,OAAAW,EAAA,EAAAX,CAAAD,IAC1BA,EAAKa,oBAAsBb,EAAKa,oBAAoBF,KAAzBV,OAAAW,EAAA,EAAAX,CAAAD,IAC3BA,EAAKc,SAAWd,EAAKc,SAASH,KAAdV,OAAAW,EAAA,EAAAX,CAAAD,IAnBCA,8EAqBJe,EAAQC,GACrBC,QAAQC,IAAI,iBAAkBH,GAC9BA,EAAOI,yCAEAC,EAAUC,GACjB,IAAIC,EAAQF,EAASG,MACnBH,EAASI,QAAQ,UAAY,EAC7BJ,EAASI,QAAQ,YAEnBrB,KAAKsB,SAAS,CAAEhB,WAAYa,EAAOd,KAAMY,iDAiBzCjB,KAAKW,SAdQ,sbA+BbX,KAAKW,SAdQ,2aAiBb,IAAMN,EAAOL,KAAKI,MAAMC,KAKxB,OACEkB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,OACEC,UAAU,YACVC,wBAAyB,CAAEC,OAAQ5B,KAAKI,MAAME,gBAIpDiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,QAAShC,KAAKO,oBAHhB,mBAOAgB,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,QAAShC,KAAKU,qBAHhB,qBAQFa,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACEU,MAAM,MACNC,OAAO,MACPC,SAAS,aACTC,MAAM,UACNC,MAAOjC,EACPkC,QAvCQ,CACdC,qBAAqB,EACrBC,iBAAiB,GAsCX9B,SAAUX,KAAKW,SACf+B,eAAgB1C,KAAK0C,0BA9GfC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.19c971fe.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport MonacoEditor from \"react-monaco-editor\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      code: `<!DOCTYPE html>\r\n    <html>\r\n      <head>\r\n      <title>Microsoft Graph Toolkit Demo</title>\r\n      //Necessary library to load components\r\n      <script src=\"https://unpkg.com/@microsoft/mgt/dist/bundle/mgt-loader.js\"></script>\r\n      </head>\r\n\r\n      <body>\r\n        <h2>Hello</h2>\r\n      </body>\r\n    </html>`,\r\n      renderCode: \"<h2>Hello</h2>\"\r\n    };\r\n    this.loadLoginComponent = this.loadLoginComponent.bind(this);\r\n    this.loadAgendaComponent = this.loadAgendaComponent.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n  editorDidMount(editor, monaco) {\r\n    console.log(\"editorDidMount\", editor);\r\n    editor.focus();\r\n  }\r\n  onChange(newValue, e) {\r\n    let edits = newValue.slice(\r\n      newValue.indexOf(\"<body>\") + 6,\r\n      newValue.indexOf(\"</body>\")\r\n    );\r\n    this.setState({ renderCode: edits, code: newValue });\r\n  }\r\n  loadLoginComponent() {\r\n    let loginHTML = `<!DOCTYPE html>\r\n    <html>\r\n      <head>\r\n      <title>Microsoft Graph Toolkit Demo</title>\r\n      //Necessary library to load components\r\n      <script src=\"https://unpkg.com/@microsoft/mgt/dist/bundle/mgt-loader.js\"></script>\r\n      </head>\r\n\r\n      <body>\r\n      <h2>Hello</h2>\r\n      <mgt-mock-provider></mgt-mock-provider>\r\n      <mgt-login></mgt-login>\r\n      </body>\r\n    </html>`;\r\n    this.onChange(loginHTML);\r\n  }\r\n  loadAgendaComponent() {\r\n    let loginHTML = `<!DOCTYPE html>\r\n    <html>\r\n      <head>\r\n      <title>Microsoft Graph Toolkit Demo</title>\r\n      //Necessary library to load components\r\n      <script src=\"https://unpkg.com/@microsoft/mgt/dist/bundle/mgt-loader.js\"></script>\r\n      </head>\r\n\r\n      <body>\r\n      <h2>Hello</h2>\r\n      <mgt-mock-provider></mgt-mock-provider>\r\n      <mgt-agenda></mgt-agenda>\r\n      </body>\r\n    </html>`;\r\n    this.onChange(loginHTML);\r\n  }\r\n  render() {\r\n    const code = this.state.code;\r\n    const options = {\r\n      selectOnLineNumbers: true,\r\n      bracketMatching: true\r\n    };\r\n    return (\r\n      <div>\r\n        <div>\r\n          <div>\r\n            <h2>Demo Area</h2>\r\n            <div\r\n              className=\"demoSpace\"\r\n              dangerouslySetInnerHTML={{ __html: this.state.renderCode }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"editorContainer\">\r\n          <div className=\"controlButtons\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={this.loadLoginComponent}\r\n            >\r\n              Login Component\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={this.loadAgendaComponent}\r\n            >\r\n              Agenda Component\r\n            </Button>\r\n          </div>\r\n          <h2>Editor</h2>\r\n          <MonacoEditor\r\n            width=\"700\"\r\n            height=\"600\"\r\n            language=\"javascript\"\r\n            theme=\"vs-dark\"\r\n            value={code}\r\n            options={options}\r\n            onChange={this.onChange}\r\n            editorDidMount={this.editorDidMount}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}